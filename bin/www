#!/usr/bin/env node

/**
 * Module dependencies.
 */
const app = require('../app'); // Adjust the path as necessary
const sequelize = require('../config/sequelizeConfig'); // Adjust the path as necessary
var debug = require('debug')('my-api:server');
var http = require('http');

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) return val; // named pipe
  if (port >= 0) return port; // port number
  return false;
}

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces, after database connection.
 */
sequelize.authenticate().then(() => {
  console.log("Database connected...");
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
}).catch((err) => {
  console.error("Error connecting to the database:", err);
});

// onError and onListening functions as in your www script


/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
      throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
      case 'EACCES':
          console.error(bind + ' requires elevated privileges');
          process.exit(1);
          break;
      case 'EADDRINUSE':
          console.error(bind + ' is already in use');
          process.exit(1);
          break;
      default:
          throw error;
  }
}

/**
* Event listener for HTTP server "listening" event.
*/
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
